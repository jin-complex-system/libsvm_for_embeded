#include "svm_model.h"
#include "math.h"

typedef double (*KernelHandle)(const float *xi, const float *x, const Model *model);

static int32_t g_label[] = {
@{label}
};

static float g_coefs[] = { 
@{coefs}
};

static float g_SVs[] = {
@{SVs}
};

double linear_kernel(const float *xi, const float *x, const Model *model)
{
    double sum = 0.f;
    int i = 0;
    int len = model->vec_dim;
    for (i = 0; i < len; i++)
    {
        sum += xi[i] * x[i];
    }
    return sum;
}

double polynomial_kernel(const float *xi, const float *x, const Model *model)
{
    double sum = 0.f;
    int i = 0;
    int len = model->vec_dim;
    double res = 0;

    for (i = 0; i < len; i++)
    {
        sum += xi[i] * x[i];
    }
    
    res = (model->gamma * sum + model->coef0);
    return res * res;
}

double rbf_kernel(const float *xi, const float *x, const Model *model)
{
    double sum = 0.f;
    int i = 0;
    int len = model->vec_dim;
    double res = 0.;
    double temp = 0.;
    for (i = 0; i < len; i++)
    {
        temp = xi[i] - x[i];
        sum += temp*temp;
    }
    
    res = exp(-model->gamma*sum);
    return res;
}

void init_svm_params(Model *svm_model)
{
    svm_model->kernel_type = @{kernel_type};
    svm_model->degree   = @{degree};
    svm_model->gamma    = @{gamma};
    svm_model->coef0    = @{coef0};
    svm_model->nr_class = @{nr_class};
    svm_model->total_sv = @{total_sv};
    svm_model->rho      = @{rho};
    svm_model->label    = g_label;
    svm_model->probA    = @{probA};
    svm_model->probB    = @{probB};

    // support vectors
    svm_model->coefs    = g_coefs;
    svm_model->vec_dim  = @{vec_dim};
    svm_model->SVs      = g_SVs;
}


double predict(const Model *svm_model, const float* x, int len)
{
    int i = 0;
    double sum = 0.f;
    KernelHandle kernel;
    if (len != svm_model->vec_dim)
    {
        // len == feature num == vector dim
        return 0;
    }
    switch (svm_model->kernel_type)
    {
    case KERNEL_LINEAR:
        kernel = linear_kernel;
        break;
    case KERNEL_POLYNOMIAL:
        kernel = polynomial_kernel;
        break;
    case KERNEL_RBF:
        kernel = rbf_kernel;
        break;
    default:
        return 0;
    }

    for (i = 0; i < svm_model->total_sv; i++)
    {
        float* xi = svm_model->SVs + i * svm_model->vec_dim;
        sum += svm_model->coefs[i] * kernel(xi, x, svm_model);
    }

    return sum-svm_model->rho;
}
